//экспортируем объект
//добавляем единственное поле required - стрелочная функция
//сама функция агрументом прнимает message - это некоторая строка
//объект содержит required и message
//message просто принимаем аргументом

//- у нас есть некоторая функция, она принимает сообщение об ошибке и эта функция возвращает уже другую функцию, которая возвращает нужный для нас объект
// - Нижнее подчеркивание говорит нам о том, что аргумент в данном случае не обязателен, поэтому сделаем его как any
// - А value в нашем случае будет типа Moment поскольку мы работаем с датами
//-  здесь все что нам остается это сравнить дату которая пришла с datepicker
// - У moment есть методы сравнивающие дату
// - В данном случае интересует сравнение либо с датой, которая текущая, либо с датой которая позже, т е дата в будущем
// - Мы можем создавать события только на даты вперед
// - А секущую дату модно получить вызвав moment
// - После того, как мы сравнили даты, нам необходимо заresolvить промис либо заrejctить
// - Если условие удовлетворяет resolve
// - То промис reject им и туда передаем сообщение об ошибке
//


import moment, {Moment} from "moment";

export const rules = {
    required: (message: string= "Обязательное поле") => ({
        required: true,
        message
    }),
    isDateAfter: (message: string) => () => ({
        validator(_: any, value: Moment) {
            if (value.isAfter(moment())) {
                return Promise.resolve()
            }
            return Promise.reject(new Error(message));
        }
    })
}